#1


{'Similar': {'Info': [{'Name': 'Tony Bennett', 'Type': 'music'}], 'Results': [{'Name': 'The Startup Kids', 'Type': 'movie'}, {'Name': 'Charlie Chaplin', 'Type': 'movie'}, {'Name': 'Venus In Fur', 'Type': 'movie'}, {'Name': 'Loving', 'Type': 'movie'}, {'Name': 'The African Queen', 'Type': 'movie'}]}}
import requests_with_caching
def get_movies_from_tastedive(movies):
    baseurl = "https://tastedive.com/api/similar"
    params_diction = {}
    params_diction["q"] = movies
    params_diction["type"] = "movies"
    params_diction["limit"] = 5 
    movie_resp = requests_with_caching.get(baseurl, params = params_diction)
    #print(movie_resp.json())
    return movie_resp.json()
# some invocations that we use in the automated tests; uncomment these if you are getting errors and want better error messages
get_movies_from_tastedive("Bridesmaids")
get_movies_from_tastedive("Black Panther")

#2


d={'Similar': {'Info': [{'Name': 'Tony Bennett', 'Type': 'music'}], 'Results': [{'Name': 'The Startup Kids', 'Type': 'movie'}, {'Name': 'Charlie Chaplin', 'Type': 'movie'}, {'Name': 'Venus In Fur', 'Type': 'movie'}, {'Name': 'Loving', 'Type': 'movie'}, {'Name': 'The African Queen', 'Type': 'movie'}]}}
import requests_with_caching
def get_movies_from_tastedive(movies):
    baseurl = "https://tastedive.com/api/similar"
    params_diction = {}
    params_diction["q"] = movies
    params_diction["type"] = "movies"
    params_diction["limit"] = 5 
    movie_resp = requests_with_caching.get(baseurl, params = params_diction)
    #print(movie_resp.json())
    return movie_resp.json()

def extract_movie_titles(d):
   return [m['Name'] for m in d['Similar']['Results']]

#print (extract_movie_titles(d))

# some invocations that we use in the automated tests; uncomment these if you are getting errors and want better error messages
extract_movie_titles(get_movies_from_tastedive("Tony Bennett"))
extract_movie_titles(get_movies_from_tastedive("Black Panther"))


#3



# some invocations that we use in the automated tests; uncomment these if you are getting errors and want better error messages
# get_related_titles(["Black Panther", "Captain Marvel"])
# get_related_titles([])
d={'Similar': {'Info': [{'Name': 'Tony Bennett', 'Type': 'music'}], 'Results': [{'Name': 'The Startup Kids', 'Type': 'movie'}, {'Name': 'Charlie Chaplin', 'Type': 'movie'}, {'Name': 'Venus In Fur', 'Type': 'movie'}, {'Name': 'Loving', 'Type': 'movie'}, {'Name': 'The African Queen', 'Type': 'movie'}]}}
import requests_with_caching
def get_movies_from_tastedive(movies):
    baseurl = "https://tastedive.com/api/similar"
    params_diction = {}
    params_diction["q"] = movies
    params_diction["type"] = "movies"
    params_diction["limit"] = 5 
    movie_resp = requests_with_caching.get(baseurl, params = params_diction)
    #print(movie_resp.json())
    return movie_resp.json()

def extract_movie_titles(d):
   return [m['Name'] for m in d['Similar']['Results']]


def get_related_titles(listMovieName):
    if listMovieName != []:
        auxList=[]
        relatedList=[]
        for movieName in listMovieName:
            auxList = extract_movie_titles(get_movies_from_tastedive(movieName))
            for movieNameAux in auxList:
                if movieNameAux not in relatedList:
                    relatedList.append(movieNameAux)
        
        return relatedList
    return listMovieName

#4


# some invocations that we use in the automated tests; uncomment these if you are getting errors and want better error messages
# get_movie_data("Venom")
# get_movie_data("Baby Mama")
import requests_with_caching
d={'Similar': {'Info': [{'Name': 'Tony Bennett', 'Type': 'music'}], 'Results': [{'Name': 'The Startup Kids', 'Type': 'movie'}, {'Name': 'Charlie Chaplin', 'Type': 'movie'}, {'Name': 'Venus In Fur', 'Type': 'movie'}, {'Name': 'Loving', 'Type': 'movie'}, {'Name': 'The African Queen', 'Type': 'movie'}]}}
#import requests_with_caching
def get_movies_from_tastedive(movies):
    baseurl = "https://tastedive.com/api/similar"
    params_diction = {}
    params_diction["q"] = movies
    params_diction["type"] = "movies"
    params_diction["limit"] = 5 
    movie_resp = requests_with_caching.get(baseurl, params = params_diction)
    #print(movie_resp.json())
    return movie_resp.json()

def extract_movie_titles(d):
   return [m['Name'] for m in d['Similar']['Results']]

#print (extract_movie_titles(d))

# some invocations that we use in the automated tests; uncomment these if you are getting errors and want better error messages
extract_movie_titles(get_movies_from_tastedive("Tony Bennett"))
extract_movie_titles(get_movies_from_tastedive("Black Panther"))

def get_movie_data(movieName, key="546c6742"):
    baseurl= "http://www.omdbapi.com/"
    params_d = {}
    params_d["t"]= movieName
    params_d["apikey"]= key
    params_d["r"]= "json"
    resp = requests_with_caching.get(baseurl, params=params_d)
    print(resp.url)
    respDic = resp.json()
    return respDic

#5


# some invocations that we use in the automated tests; uncomment these if you are getting errors and want better error messages
# get_movie_rating(get_movie_data("Deadpool 2"))
d={'Similar': {'Info': [{'Name': 'Tony Bennett', 'Type': 'music'}], 'Results': [{'Name': 'The Startup Kids', 'Type': 'movie'}, {'Name': 'Charlie Chaplin', 'Type': 'movie'}, {'Name': 'Venus In Fur', 'Type': 'movie'}, {'Name': 'Loving', 'Type': 'movie'}, {'Name': 'The African Queen', 'Type': 'movie'}]}}
import requests_with_caching
def get_movies_from_tastedive(movies):
    baseurl = "https://tastedive.com/api/similar"
    params_diction = {}
    params_diction["q"] = movies
    params_diction["type"] = "movies"
    params_diction["limit"] = 5 
    movie_resp = requests_with_caching.get(baseurl, params = params_diction)
    #print(movie_resp.json())
    return movie_resp.json()

def extract_movie_titles(d):
   return [m['Name'] for m in d['Similar']['Results']]

#print (extract_movie_titles(d))

# some invocations that we use in the automated tests; uncomment these if you are getting errors and want better error messages
extract_movie_titles(get_movies_from_tastedive("Tony Bennett"))
extract_movie_titles(get_movies_from_tastedive("Black Panther"))

def get_movie_data(movieName, key="546c6742"):
    baseurl= "http://www.omdbapi.com/"
    params_d = {}
    params_d["t"]= movieName
    params_d["apikey"]= key
    params_d["r"]= "json"
    resp = requests_with_caching.get(baseurl, params=params_d)
    print(resp.url)
    respDic = resp.json()
    return respDic
def get_movie_rating(movieNameJson):
    strRanting=""
    for typeRantingList in movieNameJson["Ratings"]:
        if typeRantingList["Source"]== "Rotten Tomatoes":
            strRanting = typeRantingList["Value"]
    if strRanting != "":
        ranting = int(strRanting[:2])
    else: ranting = 0
    return ranting

#6


# some invocations that we use in the automated tests; uncomment these if you are getting errors and want better error messages
# get_sorted_recommendations(["Bridesmaids", "Sherlock Holmes"])

d={'Similar': {'Info': [{'Name': 'Tony Bennett', 'Type': 'music'}], 'Results': [{'Name': 'The Startup Kids', 'Type': 'movie'}, {'Name': 'Charlie Chaplin', 'Type': 'movie'}, {'Name': 'Venus In Fur', 'Type': 'movie'}, {'Name': 'Loving', 'Type': 'movie'}, {'Name': 'The African Queen', 'Type': 'movie'}]}}
import requests_with_caching
def get_movies_from_tastedive(movies):
    baseurl = "https://tastedive.com/api/similar"
    params_diction = {}
    params_diction["q"] = movies
    params_diction["type"] = "movies"
    params_diction["limit"] = 5 
    movie_resp = requests_with_caching.get(baseurl, params = params_diction)
    #print(movie_resp.json())
    return movie_resp.json()

def extract_movie_titles(d):
   return [m['Name'] for m in d['Similar']['Results']]

#print (extract_movie_titles(d))

# some invocations that we use in the automated tests; uncomment these if you are getting errors and want better error messages
extract_movie_titles(get_movies_from_tastedive("Tony Bennett"))
extract_movie_titles(get_movies_from_tastedive("Black Panther"))

def get_movie_data(movieName, key="546c6742"):
    baseurl= "http://www.omdbapi.com/"
    params_d = {}
    params_d["t"]= movieName
    params_d["apikey"]= key
    params_d["r"]= "json"
    resp = requests_with_caching.get(baseurl, params=params_d)
    print(resp.url)
    respDic = resp.json()
    return respDic
def get_related_titles(listMovieName):
    if listMovieName != []:
        auxList=[]
        relatedList=[]
        for movieName in listMovieName:
            auxList = extract_movie_titles(get_movies_from_tastedive(movieName))
            for movieNameAux in auxList:
                if movieNameAux not in relatedList:
                    relatedList.append(movieNameAux)
        
        return relatedList
    return listMovieName
def get_movie_rating(movieNameJson):
    strRanting=""
    for typeRantingList in movieNameJson["Ratings"]:
        if typeRantingList["Source"]== "Rotten Tomatoes":
            strRanting = typeRantingList["Value"]
    if strRanting != "":
        ranting = int(strRanting[:2])
    else: ranting = 0
    return ranting
def get_sorted_recommendations(listMovieTitle):
    listMovie= get_related_titles(listMovieTitle)
    listMovie= sorted(listMovie, key = lambda movieName: (get_movie_rating(get_movie_data(movieName)), movieName), reverse=True)
    
    return listMovie